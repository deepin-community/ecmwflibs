Description: Temporarily include findlibs in ecmwflibs explicitly
Author: Alastair McKinstry <mckinstry@debian.org>
Last-Updated: 2021-10-01
Forwarded: not-needed

--- a/ecmwflibs/__init__.py
+++ b/ecmwflibs/__init__.py
@@ -14,11 +14,49 @@
 import sys
 import tempfile
 import warnings
+import sysconfig
+import ctypes.util
 
-from findlibs import find as _find_library
+# from findlibs import find as _find_library
 
 __version__ = "0.3.13"
 
+EXTENSIONS = {
+    "darwin": ".dylib",
+    "win32": ".dll",
+}
+
+
+# Taken from findlibs
+def _find_library(name):
+    """Returns the path to the selected library, or None if not found."""
+
+    extension = EXTENSIONS.get(sys.platform, ".so")
+
+    for what in ("HOME", "DIR"):
+        LIB_HOME = "{}_{}".format(name.upper(), what)
+        if LIB_HOME in os.environ:
+            home = os.environ[LIB_HOME]
+            fullname = os.path.join(home, "lib", "lib{}{}".format(name, extension))
+            if os.path.exists(fullname):
+                return fullname
+
+    for path in (
+        "LD_LIBRARY_PATH",
+        "DYLD_LIBRARY_PATH",
+    ):
+        for home in os.environ.get(path, "").split(":"):
+            fullname = os.path.join(home, "lib{}{}".format(name, extension))
+            if os.path.exists(fullname):
+                return fullname
+
+    for root in ("/", "/usr/", "/usr/local/", "/opt/"):
+        for lib in ("lib", "lib64"):
+            fullname = os.path.join(home, "{}{}/lib{}{}".format(root, lib, name, extension))
+            if os.path.exists(fullname):
+                return fullname
+
+    return ctypes.util.find_library(name)
 
 _here = os.path.join(os.path.dirname(__file__))
 _universal = os.path.exists(os.path.join(_here, "_universal"))
@@ -125,6 +163,7 @@
             warnings.warn(f"ECMWFLIBS_USED_INSTALLED found {name} at {path}")
         return path
 
+    
     if _universal:  # Universal version
         path = _find_library(name)
         if path:
@@ -141,6 +180,11 @@
         return os.environ[env]
 
     here = os.path.dirname(__file__)
+
+    # Debian only
+    ma = sysconfig.get_config_var('MULTIARCH')
+    here = '/usr/lib/' + ma    
+
     extension = EXTENSIONS.get(sys.platform, ".so")
 
     for libdir in [here + ".libs", os.path.join(here, ".dylibs"), here]:
--- a/setup.py
+++ b/setup.py
@@ -88,9 +88,6 @@
     packages=find_packages(),
     include_package_data=True,
     package_data={"": shared_files},
-    install_requires=[
-        "findlibs",
-    ],
     zip_safe=True,
     classifiers=[
         "Development Status :: 3 - Alpha",
